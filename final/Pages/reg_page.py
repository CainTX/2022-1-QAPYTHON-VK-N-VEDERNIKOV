from base import Base
from sql_client import Mysql
import credentials as cred
import locators
from selenium.common.exceptions import TimeoutException


class RegPage(Base):

    reg_locators = locators.RegLocators()

    # UI –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    def reg_basic(self):
        self.logger.info("Attempting registration...")
        self.go_to_url(f"{cred.base_url}/reg")
        email = self.generate_random_string(10)+"@mail.ru"
        middle_name = self.generate_random_string(5)
        username = self.generate_random_string(6)
        password = self.generate_random_string(7)
        self.reg_data_setup(self.generate_random_string(255), self.generate_random_string(1),
                            middle_name, username, email, password, password)

        sql_result = Mysql.get_db_values(Mysql, f"SELECT * from test_users where username = '{username}'")
        for i in range(4):
            sql_param = ["username", "email", "password", "middle_name"]
            reg_param = [username, email, password, middle_name]
            try:
                assert sql_result[0][sql_param[i]] == reg_param[i]
            except AssertionError:
                self.logger.error(f"Missing {sql_param[i]}:{reg_param[i]} in database")
        Mysql.delete_value(Mysql, f"DELETE FROM test_users WHERE email = '{email}'")
        self.logger.info(f"Successful registration, created user: {username}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    def reg_validation_check(self):
        self.logger.info("Checking the validation display")
        self.go_to_url(f"{cred.base_url}/reg")
        self.wd_wait_clickable(self.reg_locators.reg_submit)
        self.clear_send(self.reg_locators.reg_username, "Ret")
        self.search_click(self.reg_locators.reg_submit)

        msg_username = self.acquire_attribute(self.reg_locators.reg_username, "validationMessage")
        msg_email = self.acquire_attribute(self.reg_locators.reg_email, "validationMessage")
        msg_password = self.acquire_attribute(self.reg_locators.reg_password, "validationMessage")
        msg_term = self.acquire_attribute(self.reg_locators.reg_term, "validationMessage")
        for i in range(4):
            msg = [msg_username, msg_email, msg_password, msg_term]
            valid_msg = ["–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: 6. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å: 3.",
                         "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ.", "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–ª–∞–∂–æ–∫.",
                         "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ."]
            error_msg = ["Username", "Email", "Password", "Terms"]
            assert msg[i] == valid_msg[i], self.logger.error(f"Missing validationMessage for {error_msg[i]}")
        self.logger.info("Validation working fine")

    # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –ª–æ–≥–∏–Ω–∞
    def reg_auth_link(self):
        self.logger.info("Attempting redirect to login page")
        self.go_to_url(f"{cred.base_url}/reg")
        self.search_click(self.reg_locators.reg_login)
        assert self.get_url() == f"{cred.base_url}/login", self.logger.error(f"Redirect failed, current url:"
                                                                             f" {self.get_url()}")
        self.logger.info("Successfully redirected to login page")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    def negative_reg_wo_data(self):
        self.logger.info("Test registration without data")
        self.go_to_url(f"{cred.base_url}/reg")
        self.search_click(self.reg_locators.reg_submit)
        assert self.get_url() == f"{cred.base_url}/reg", self.logger.error(f"Redirect happened, current url:"
                                                                           f" {self.get_url()}")
        self.logger.info("Registration successfully denied")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def negative_reg_duplicate_user(self):
        self.logger.info("Registration with already existed account")
        self.reg_user_check()
        self.reg_data_setup(cred.main_name, cred.main_surname, cred.main_middle_name, cred.main_username,
                            cred.main_email, cred.main_password, cred.main_password)
        try:
            self.wd_wait_visibility(self.reg_locators.reg_err_exist)
        except TimeoutException:
            assert 0, self.logger.error("No error message is displayed")
        self.logger.info("Registration successfully denied")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ—á—Ç—ã
    def negative_reg_duplicate_mail(self):
        self.logger.info("Registration with already existed email")
        self.reg_user_check()
        password = self.generate_random_string(6)
        self.reg_data_setup(self.generate_random_string(6), self.generate_random_string(6),
                            self.generate_random_string(6), self.generate_random_string(6),
                            cred.main_email, password, password)
        try:
            self.wd_wait_visibility(self.reg_locators.reg_err_exist)
        except TimeoutException:
            self.wd_wait_invisibility(self.reg_locators.reg_err_exist)
            self.logger.info("Registration successfully denied")
        else:
            assert 0, self.logger.error("Server error | Duplicate mail")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    def negative_reg_wrong_password(self):
        self.logger.info("Registration with wrong password")
        self.reg_data_setup(self.generate_random_string(6), self.generate_random_string(6),
                            self.generate_random_string(6), self.generate_random_string(6),
                            self.generate_random_string(10)+"@mail.ru", "111", "222")
        try:
            self.wd_wait_visibility(self.reg_locators.reg_err_password)
            self.logger.info("Registration successfully denied")
        except TimeoutException:
            assert 0, self.logger.error("No error message is displayed")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—á—Ç—ã
    def negative_reg_broken_email(self):
        self.logger.info("Registration with broken email")
        self.reg_data_setup(self.generate_random_string(6), self.generate_random_string(6),
                            self.generate_random_string(6), self.generate_random_string(6),
                            self.generate_random_string(10), "222", "222")
        try:
            self.wd_wait_visibility(self.reg_locators.reg_err_email)
            self.logger.info("Registration successfully denied")
        except TimeoutException:
            assert 0, self.logger.error("No error message is displayed")

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    # Unicode –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º, –Ω–æ –æ–Ω–∏ —Ç–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤—ã–∑—ã–≤–∞—é—Ç 500—é –æ—à–∏–±–∫—É (üåé üåä)
    def negative_reg_emoji(self):
        self.logger.info("Registration with emoji in name")
        mail = self.generate_random_string(10)+"@mail.ru"
        self.reg_data_setup(u'\u2764', u'\u2764', u'\u2764', self.generate_random_string(6),
                            mail, "222", "222")
        sql_result = Mysql.get_db_values(Mysql, f"SELECT * from test_users where email = '{mail}'")
        try:
            self.wd_wait_visibility(self.reg_locators.reg_err_server)
            assert 0, self.logger.error("Server error | Unrecognized symbols")
        except TimeoutException:
            if sql_result[0]['email'] == mail:
                Mysql.delete_value(Mysql, f"DELETE FROM test_users WHERE email = '{mail}'")
                self.logger.info("Successful registration with emoji symbols")

    # –ü–æ–ø—ã—Ç–∫–∞ SQL –∏ XSS –∏–Ω—ä–µ–∫—Ü–∏–∏
    def negative_reg_injections(self):
        self.logger.info("Trying injecting data")
        script_name = '+alert(document.domain)+'
        script_surname = '<script>console.log("XSSTEST")</script>'
        # –ò–∑-–∑–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–∏, –ø–µ—Ä–≤—ã–π —Ä–∞–∑ mysql –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã–¥–∞–≤–∞–ª Error code: 1064
        password = "SELECT * FROM test_users WHERE username='Retroweaver' and password='' OR '1'='1'"
        self.reg_data_setup(script_name, script_surname, '', self.generate_random_string(6),
                            self.generate_random_string(10)+"@mail.ru", password, password)
        sql_result = Mysql.get_db_values(Mysql, f"SELECT * from test_users where name = '{script_name}'")
        assert sql_result[0]['password'] == password, self.logger.error(f"Injection succeed, wrong url:"
                                                                        f" {self.get_url()}")
        Mysql.delete_value(Mysql, f"DELETE FROM test_users WHERE name = '{script_name}'")
        self.logger.info("Injection failed successfully")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def reg_data_setup(self, name, surname, middle_name, username, email, password, confirm):
        self.go_to_url(f"{cred.base_url}/reg")
        self.wd_wait_clickable(self.reg_locators.reg_submit)
        # –£ –ø–æ–ª—è name —Å–æ—Ñ—Ç-–ª–æ–∫ –≤ 45 —Å–∏–º–≤–æ–ª–æ–≤
        self.clear_send(self.reg_locators.reg_name, name)
        self.clear_send(self.reg_locators.reg_surname, surname)
        self.clear_send(self.reg_locators.reg_middle_name, middle_name)
        self.clear_send(self.reg_locators.reg_username, username)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é @mail.com
        self.clear_send(self.reg_locators.reg_email, email)
        self.clear_send(self.reg_locators.reg_password, password)
        self.clear_send(self.reg_locators.reg_confirm, confirm)
        self.mouse_to_element(self.reg_locators.reg_term)
        self.search_click(self.reg_locators.reg_submit)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    def reg_user_check(self):
        sql_result = Mysql.get_db_values(Mysql, f"SELECT * from test_users where username = '{cred.main_username}'")
        assert sql_result[0] is not None, self.reg_data_setup(cred.main_name, cred.main_surname, cred.main_middle_name,
                                                              cred.main_username, cred.main_email, cred.main_password,
                                                              cred.main_password)
